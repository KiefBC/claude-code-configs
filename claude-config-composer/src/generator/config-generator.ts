import fs from 'fs/promises';
import path from 'path';
import { ConfigParser } from '../parser/config-parser';
import { ComponentMerger } from '../merger/component-merger';
import { ConfigMerger } from '../merger/config-merger';
import { ConfigMetadata } from '../registry/config-registry';

export class ConfigGenerator {
  private parser: ConfigParser;
  private componentMerger: ComponentMerger;
  private configMerger: ConfigMerger;

  constructor() {
    this.parser = new ConfigParser();
    this.componentMerger = new ComponentMerger();
    this.configMerger = new ConfigMerger();
  }

  async generateCompleteConfig(
    configs: Array<{ path: string; metadata: ConfigMetadata }>,
    outputDir: string
  ): Promise<void> {
    // Parse all configurations
    const parsedConfigs = await Promise.all(
      configs.map(async (config) => ({
        metadata: config.metadata,
        parsed: await this.parser.parseConfigDirectory(config.path)
      }))
    );

    // Create output directories
    const claudeDir = path.join(outputDir, '.claude');
    await fs.mkdir(claudeDir, { recursive: true });
    await fs.mkdir(path.join(claudeDir, 'agents'), { recursive: true });
    await fs.mkdir(path.join(claudeDir, 'commands'), { recursive: true });
    await fs.mkdir(path.join(claudeDir, 'hooks'), { recursive: true });

    // Merge CLAUDE.md
    const claudeMdConfigs = parsedConfigs
      .filter(c => c.parsed.claudeMd)
      .map(c => ({
        content: c.parsed.claudeMd!,
        metadata: c.metadata
      }));
    
    if (claudeMdConfigs.length > 0) {
      const mergedClaudeMd = this.configMerger.merge(claudeMdConfigs);
      await fs.writeFile(path.join(outputDir, 'CLAUDE.md'), mergedClaudeMd);
    }

    // Merge and write agents
    const agentGroups = parsedConfigs.map(c => c.parsed.agents);
    const mergedAgents = this.componentMerger.mergeAgents(agentGroups);
    
    for (const agent of mergedAgents) {
      const filename = `${agent.name.toLowerCase().replace(/[^a-z0-9-]/g, '-')}.md`;
      const content = this.componentMerger.generateAgentFile(agent);
      await fs.writeFile(path.join(claudeDir, 'agents', filename), content);
    }

    // Merge and write commands
    const commandGroups = parsedConfigs.map(c => c.parsed.commands);
    const mergedCommands = this.componentMerger.mergeCommands(commandGroups);
    
    for (const command of mergedCommands) {
      const filename = `${command.name.toLowerCase().replace(/[^a-z0-9-]/g, '-')}.md`;
      const content = this.componentMerger.generateCommandFile(command);
      await fs.writeFile(path.join(claudeDir, 'commands', filename), content);
    }

    // Merge and write hooks
    const hookGroups = parsedConfigs.map(c => c.parsed.hooks);
    const mergedHooks = this.componentMerger.mergeHooks(hookGroups);
    
    for (const hook of mergedHooks) {
      await fs.writeFile(path.join(claudeDir, 'hooks', hook.name), hook.content);
    }

    // Merge and write settings.json
    const settingsArray = parsedConfigs.map(c => c.parsed.settings);
    const mergedSettings = this.componentMerger.mergeSettings(settingsArray);
    
    // Add metadata to settings
    mergedSettings._metadata = {
      generated: new Date().toISOString(),
      generator: 'claude-config-composer@1.0.0',
      sources: configs.map(c => c.metadata.name),
      note: 'This is a composed configuration. Review and adjust as needed.'
    };
    
    await fs.writeFile(
      path.join(claudeDir, 'settings.json'),
      JSON.stringify(mergedSettings, null, 2)
    );

    // Generate README
    await this.generateReadme(outputDir, configs.map(c => c.metadata));

    // Generate package.json
    await this.generatePackageJson(outputDir, configs.map(c => c.metadata));
  }

  private async generateReadme(outputDir: string, metadata: ConfigMetadata[]): Promise<void> {
    const content = [
      '# Composed Claude Code Configuration',
      '',
      'This configuration was dynamically generated by Claude Config Composer.',
      '',
      '## Included Configurations',
      '',
      ...metadata.map(m => `- **${m.name}** (v${m.version}): ${m.description}`),
      '',
      '## Structure',
      '',
      '```',
      '.claude/',
      '├── settings.json    # Merged settings and permissions',
      '├── agents/          # Specialized AI agents',
      '├── commands/        # Custom commands',
      '└── hooks/           # Automation scripts',
      'CLAUDE.md            # Main configuration document',
      '```',
      '',
      '## Usage',
      '',
      '1. Ensure Claude Code can access this directory',
      '2. The configuration will be automatically loaded',
      '3. Use custom commands with `/` prefix',
      '4. Agents are automatically available for specialized tasks',
      '',
      '## Customization',
      '',
      'You can modify any file in this configuration to suit your needs:',
      '',
      '- Edit `.claude/settings.json` to adjust permissions and settings',
      '- Modify agents in `.claude/agents/` for specialized behavior',
      '- Update commands in `.claude/commands/` for custom workflows',
      '- Adjust hooks in `.claude/hooks/` for automation',
      '',
      '## Compatibility Notes',
      '',
      'This is a composed configuration. Some features may require adjustment:',
      '',
      '- Review merged settings for conflicts',
      '- Test custom commands in your environment',
      '- Verify hook scripts work with your setup',
      '- Check agent tools match your permissions',
      '',
      '## Support',
      '',
      'For issues or questions, refer to the original configurations:',
      ...metadata.map(m => `- ${m.name}: ${m.path}`),
      '',
      `Generated: ${new Date().toISOString()}`,
      'Generator: Claude Config Composer v1.0.0'
    ].join('\n');

    await fs.writeFile(path.join(outputDir, 'README.md'), content);
  }

  private async generatePackageJson(outputDir: string, metadata: ConfigMetadata[]): Promise<void> {
    const packageJson = {
      name: 'composed-claude-config',
      version: '1.0.0',
      description: `Claude Code configuration for: ${metadata.map(m => m.name).join(', ')}`,
      'claude-config': {
        version: '1.0.0',
        type: 'composed',
        sources: metadata.map(m => ({
          id: m.id,
          name: m.name,
          version: m.version,
          category: m.category
        })),
        features: {
          agents: true,
          commands: true,
          hooks: true,
          settings: true
        },
        generatedAt: new Date().toISOString(),
        generator: 'claude-config-composer@1.0.0'
      },
      keywords: [
        'claude-code',
        'ai-assistant',
        'development-config',
        ...metadata.map(m => m.id)
      ],
      private: true
    };

    await fs.writeFile(
      path.join(outputDir, 'package.json'),
      JSON.stringify(packageJson, null, 2)
    );
  }
}